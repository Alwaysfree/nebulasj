package io.nebulas.core;

import io.nebulas.util.ByteUtils;
import org.junit.Assert;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class TransactionTest {

    @Test
    public void fromProto() throws Exception {

        String encodedText = "CiCCVuSptT1oavBbf2UJfh+FHaOb15rhXgvMnyMPrpaLORIaGVfKCoAu9e0830glBZkJcmNoRXXOUbwvcz8aGhlXygqALvXtPN9IJQWZCXJjaEV1zlG8L3M/IhAAAAAAAAAAAAAAAAAAAAAKKAEwxbrg1gU6LAoGZGVwbG95EiJ7IlNvdXJjZVR5cGUiOiIxMSIsIlNvdXJjZSI6IjExMSJ9QGRKEAAAAAAAAAAAAAAAAAAATiBSEAAAAAAAAAAAAAAAAAAPQkBYAWJB5ZgDuJwK+EPpThEY0sAHc19immxH/LJCyXzj3OeaDUV7JGil7aIlcRTVsWAd32D5T12q9INlNVCT9m2lEV6/YgE=";

        byte[] result = ByteUtils.Base64ToBytes(encodedText);

        Transaction transaction = Transaction.FromProto(result);

        String tr = ByteUtils.Base64ToString(transaction.toProto());

        assertTrue(encodedText.equals(tr));
    }

    @Test
    public void calculateHash() throws Exception {
        String encodedText = "CiCCVuSptT1oavBbf2UJfh+FHaOb15rhXgvMnyMPrpaLORIaGVfKCoAu9e0830glBZkJcmNoRXXOUbwvcz8aGhlXygqALvXtPN9IJQWZCXJjaEV1zlG8L3M/IhAAAAAAAAAAAAAAAAAAAAAKKAEwxbrg1gU6LAoGZGVwbG95EiJ7IlNvdXJjZVR5cGUiOiIxMSIsIlNvdXJjZSI6IjExMSJ9QGRKEAAAAAAAAAAAAAAAAAAATiBSEAAAAAAAAAAAAAAAAAAPQkBYAWJB5ZgDuJwK+EPpThEY0sAHc19immxH/LJCyXzj3OeaDUV7JGil7aIlcRTVsWAd32D5T12q9INlNVCT9m2lEV6/YgE=";
        byte[] result = ByteUtils.Base64ToBytes(encodedText);

        Transaction transaction = Transaction.FromProto(result);
        byte[] originHash = transaction.getHash();
        byte[] calHash = transaction.calculateHash();
        Assert.assertTrue(ByteUtils.Equal(originHash, calHash));
    }

    @Test
    public void binaryPayload() throws Exception {
        String encodedText = "CiD/DXtAEjr1gTtq3T3pk2nL8CmkZPWzt7suFSPQhi4YEhIaGVeQ+6EMye7DjoRMJLuiXjJc1WRPcPmUV9IaGhlXkPuhDMnuw46ETCS7ol4yXNVkT3D5lFfSIhAAAAAAAAAAAA3gtrOnZAAAKAEw7O7m1gU6CAoGYmluYXJ5QOkHShAAAAAAAAAAAAAAAAAAD0JAUhAAAAAAAAAAAAAAAAAAAw1AWAFiQdX0esPCiDrfxGvCUt51UEZUaasdlYrcAkllPgyw6soeKq8+lRs1hYZPvYWDSzSWbhKs9D4xo5DgRbvdr5fRmekB";
        byte[] result = ByteUtils.Base64ToBytes(encodedText);

        Transaction transaction = Transaction.FromProto(result);
        byte[] originData = transaction.getData().getPayload().toByteArray();
        TransactionBinaryPayload payload = TransactionBinaryPayload.LoadPayload(originData);
        byte[] data = payload.toBytes();
        Assert.assertTrue(ByteUtils.Equal(originData, data));
    }

    @Test
    public void deployPayload() throws Exception {
        String encodedText = "";
        byte[] result = ByteUtils.Base64ToBytes(encodedText);

        Transaction transaction = Transaction.FromProto(result);
        byte[] originData = transaction.getData().getPayload().toByteArray();
//        System.out.println(new String(originData));
        TransactionDeployPayload payload = TransactionDeployPayload.LoadPayload(originData);
        byte[] data = payload.toBytes();
//        System.out.println(new String(data));
        Assert.assertTrue(ByteUtils.Equal(originData, data));
    }

    @Test
    public void callPayload() throws Exception {
        String encodedText = "CiA5i5zaH6+kSIxjX88xUNPH0LeoknGppfOa23UfS2NH9xIaGVeK0IDCTtos0J+e5qlQ7tNjSM3HvaFl6SwaGhlYM0hO38lXyHfazlcblGGsAOEIsm0ZdxMEIhAAAAAAAAAAAAAAAAAAAAABKAEw5rzr1gU6JQoEY2FsbBIdeyJGdW5jdGlvbiI6Im5hbWUiLCJBcmdzIjoiIn1A6gdKEAAAAAAAAAAAAAAAAAAPQkBSEAAAAAAAAAAAAAAAAAAehIBYAWJBCAb6x7JZ4PE1NhfZj6vjVMh2Y9nqVE5sPBN4OYAOr1MzKP7uty655vCIBURfv8A0JtafaYTbz8Bjy1OiumbLpwE=";
        byte[] result = ByteUtils.Base64ToBytes(encodedText);

        Transaction transaction = Transaction.FromProto(result);
        byte[] originData = transaction.getData().getPayload().toByteArray();
        TransactionCallPayload payload = TransactionCallPayload.LoadPayload(originData);
        byte[] data = payload.toBytes();
        Assert.assertTrue(ByteUtils.Equal(originData, data));
    }
}